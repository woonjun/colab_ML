{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNZEfKnMw2oTRArfq8PXcHa"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QoELNajkYDlP","executionInfo":{"status":"ok","timestamp":1679664751242,"user_tz":-540,"elapsed":41270,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"281c95a8-9ec0-41d9-9ef2-c17ff28495cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["cd /content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GnN3jj5_YHzn","executionInfo":{"status":"ok","timestamp":1679664754071,"user_tz":-540,"elapsed":2831,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"00f3c924-073d-437f-ad82-0effed54c10b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN\n"]}]},{"cell_type":"code","source":["!git config --global user.email '7373wj@naver.com'\n","!git config --global user.name 'woonjun'"],"metadata":{"id":"UKiALF1BYQgX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!git add --all"],"metadata":{"id":"HZj-ev9_YRn3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!git commit -m 'MNIST100 학습 완료'\n","!git push"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ABeCXlVIYSxZ","executionInfo":{"status":"ok","timestamp":1679489631618,"user_tz":-540,"elapsed":13960,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"7660ac3c-f625-48e6-b278-faf167354539"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[main 53259e9] MNIST100 학습 완료\n"," 1 file changed, 1 insertion(+), 1 deletion(-)\n"," rewrite ML_CNN/CNN_FASHION.ipynb (95%)\n","Enumerating objects: 7, done.\n","Counting objects: 100% (7/7), done.\n","Delta compression using up to 2 threads\n","Compressing objects: 100% (4/4), done.\n","Writing objects: 100% (4/4), 735 bytes | 183.00 KiB/s, done.\n","Total 4 (delta 2), reused 0 (delta 0)\n","remote: Resolving deltas: 100% (2/2), completed with 2 local objects.\u001b[K\n","To https://github.com/woonjun/colab_ML.git\n","   d944cf2..53259e9  main -> main\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EkXK1vrc4YtX","executionInfo":{"status":"ok","timestamp":1679668217333,"user_tz":-540,"elapsed":712,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"b01fd768-7491-4a9e-c9a4-b9f2e2d9cfb2"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda is available\n"]}],"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import torchvision\n","import torchvision.transforms as transfroms\n"," \n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","torch.manual_seed(777)\n","if device == 'cuda':\n","    torch.cuda.manual_seed_all(777)\n","print(device + \" is available\")\n"," \n","learning_rate = 0.001\n","batch_size = 100\n","num_classes = 10\n","epochs = 5\n"," \n","# MNIST 데이터셋 로드\n","train_set = torchvision.datasets.MNIST(\n","    root = './data/MNIST',\n","    train = True,\n","    download = True,\n","    transform = transfroms.Compose([\n","        transfroms.ToTensor() # 데이터를 0에서 255까지 있는 값을 0에서 1사이 값으로 변환\n","    ])\n",")\n","test_set = torchvision.datasets.MNIST(\n","    root = './data/MNIST',\n","    train = False,\n","    download = True,\n","    transform = transfroms.Compose([\n","        transfroms.ToTensor() # 데이터를 0에서 255까지 있는 값을 0에서 1사이 값으로 변환\n","    ])\n",")\n"," \n","# train_loader, test_loader 생성\n","train_loader = torch.utils.data.DataLoader(train_set, batch_size=batch_size)\n","test_loader = torch.utils.data.DataLoader(test_set, batch_size=batch_size)\n"," \n","# input size를 알기 위해서\n","examples = enumerate(train_set)\n","batch_idx, (example_data, example_targets) = next(examples)\n","example_data.shape\n"," \n","class ConvNet(nn.Module):\n","  def __init__(self): # layer 정의\n","        super(ConvNet, self).__init__()\n","\n","        # input size = 28x28 \n","        self.conv1 = nn.Conv2d(1, 10, kernel_size=5) # input channel = 1, filter = 10, kernel size = 5, zero padding = 0, stribe = 1\n","        # ((W-K+2P)/S)+1 공식으로 인해 ((28-5+0)/1)+1=24 -> 24x24로 변환\n","        # maxpooling하면 12x12\n","  \n","        self.conv2 = nn.Conv2d(10, 20, kernel_size=5) # input channel = 1, filter = 10, kernel size = 5, zero padding = 0, stribe = 1\n","        # ((12-5+0)/1)+1=8 -> 8x8로 변환\n","        # maxpooling하면 4x4\n","\n","        self.drop2D = nn.Dropout2d(p=0.25, inplace=False) # 랜덤하게 뉴런을 종료해서 학습을 방해해 학습이 학습용 데이터에 치우치는 현상을 막기 위해 사용\n","        self.mp = nn.MaxPool2d(2)  # 오버피팅을 방지하고, 연산에 들어가는 자원을 줄이기 위해 maxpolling\n","        self.fc1 = nn.Linear(320,100) # 4x4x20 vector로 flat한 것을 100개의 출력으로 변경\n","        self.fc2 = nn.Linear(100,10) # 100개의 출력을 10개의 출력으로 변경\n","\n","  def forward(self, x):\n","        x = F.relu(self.mp(self.conv1(x))) # convolution layer 1번에 relu를 씌우고 maxpool, 결과값은 12x12x10\n","        x = F.relu(self.mp(self.conv2(x))) # convolution layer 2번에 relu를 씌우고 maxpool, 결과값은 4x4x20\n","        x = self.drop2D(x)\n","        x = x.view(x.size(0), -1) # flat\n","        x = self.fc1(x) # fc1 레이어에 삽입\n","        x = self.fc2(x) # fc2 레이어에 삽입\n","        return F.log_softmax(x) # fully-connected layer에 넣고 logsoftmax 적용\n"," \n","model = ConvNet().to(device) # CNN instance 생성\n","# Cost Function과 Optimizer 선택\n","criterion = nn.CrossEntropyLoss().to(device)\n","optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)\n"," "]},{"cell_type":"code","source":["example_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hp-nDx3rADh2","executionInfo":{"status":"ok","timestamp":1679666672982,"user_tz":-540,"elapsed":2,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"7dff0316-a90b-4800-9c99-523666605d38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 28, 28])"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["def test(dataloader, model, criterion):\n","  size = len(dataloader.dataset)\n","  num_batches = len(dataloader)\n","  model.eval()\n","  test_loss, test_acc = 0, 0\n","  with torch.no_grad():\n","    for X, y in dataloader:\n","      X, y = X.to(device), y.to(device)\n","      pred = model(X)\n","      test_loss += criterion(pred, y).item()\n","      test_acc += (pred.argmax(1) == y).type(torch.float).sum().item()\n","\n","  test_loss /= num_batches\n","  test_acc /= size\n","\n","  print(f\"TEST: \\n Accuracy: {(100*test_acc):>.1f}%, Avg loss: {test_loss:>8f} \\n\")\n","\n","  return test_loss, test_acc"],"metadata":{"id":"SIeHoWuni8Ri"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train(dataloader, model, criterion, optimizer):\n","  size = len(dataloader.dataset)\n","  train_accuracy, train_loss = 0, 0\n","  model.train()\n","  for batch, (X, y) in enumerate(dataloader, 0):\n","\n","    X, y = X.to(device), y.to(device)\n","    optimizer.zero_grad()\n","    pred = model(X)\n","    loss = criterion(pred, y)\n","    loss.backward()\n","    optimizer.step()\n","\n","    train_accuracy += (pred.argmax(1) == y).type(torch.float).sum().item()\n","    train_loss += loss.item()\n","\n","    if batch % 100 == 0:\n","      current = (batch+1) * len(X)\n","      \n","      print(f\"loss: {train_loss/current:>7f} accuracy: {train_accuracy/current :>7f} [{current:>5d}/{size:>5d}]\")\n","\n","  return train_loss/len(dataloader), train_accuracy/size"],"metadata":{"id":"_c7iNq15i9Sb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["epochs = 10\n","training_loss, training_accuracy = [], []\n","validation_loss, validation_accuracy = [], []\n","for i in range(epochs):\n","  print(\"Epoch {}\\n----------------------------\".format(i+1))\n","  train_loss, train_accuracy = train(train_loader, model, criterion, optimizer)\n","  val_loss, val_accuracy = test(test_loader, model, criterion)\n","\n","  training_loss.append(train_loss)\n","  training_accuracy.append(train_accuracy)\n","  validation_loss.append(val_loss)\n","  validation_accuracy.append(val_accuracy)\n","history = [training_loss,training_accuracy,validation_loss, validation_accuracy]\n","PATH_TO_TRAINED_MODEL = 'model.pth'\n","torch.save(model.state_dict(), PATH_TO_TRAINED_MODEL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y2EyZAPoi_qf","executionInfo":{"status":"ok","timestamp":1679668332175,"user_tz":-540,"elapsed":102771,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"f5e9ae02-c11f-4b94-ac7c-109ff9ca0e95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1\n","----------------------------\n","loss: 0.023140 accuracy: 0.110000 [  100/60000]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-56-5edf47940209>:71: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.\n","  return F.log_softmax(x) # fully-connected layer에 넣고 logsoftmax 적용\n"]},{"output_type":"stream","name":"stdout","text":["loss: 0.008645 accuracy: 0.760396 [10100/60000]\n","loss: 0.005894 accuracy: 0.831940 [20100/60000]\n","loss: 0.004673 accuracy: 0.866379 [30100/60000]\n","loss: 0.003967 accuracy: 0.885960 [40100/60000]\n","loss: 0.003528 accuracy: 0.897964 [50100/60000]\n","TEST: \n"," Accuracy: 97.1%, Avg loss: 0.091101 \n","\n","Epoch 2\n","----------------------------\n","loss: 0.001852 accuracy: 0.960000 [  100/60000]\n","loss: 0.001390 accuracy: 0.958812 [10100/60000]\n","loss: 0.001317 accuracy: 0.960746 [20100/60000]\n","loss: 0.001258 accuracy: 0.962292 [30100/60000]\n","loss: 0.001228 accuracy: 0.963017 [40100/60000]\n","loss: 0.001221 accuracy: 0.963174 [50100/60000]\n","TEST: \n"," Accuracy: 98.1%, Avg loss: 0.061458 \n","\n","Epoch 3\n","----------------------------\n","loss: 0.001370 accuracy: 0.980000 [  100/60000]\n","loss: 0.000993 accuracy: 0.970891 [10100/60000]\n","loss: 0.000962 accuracy: 0.970348 [20100/60000]\n","loss: 0.000924 accuracy: 0.971429 [30100/60000]\n","loss: 0.000917 accuracy: 0.971596 [40100/60000]\n","loss: 0.000917 accuracy: 0.971477 [50100/60000]\n","TEST: \n"," Accuracy: 98.4%, Avg loss: 0.049085 \n","\n","Epoch 4\n","----------------------------\n","loss: 0.001156 accuracy: 0.980000 [  100/60000]\n","loss: 0.000849 accuracy: 0.975149 [10100/60000]\n","loss: 0.000811 accuracy: 0.974925 [20100/60000]\n","loss: 0.000790 accuracy: 0.975648 [30100/60000]\n","loss: 0.000782 accuracy: 0.976234 [40100/60000]\n","loss: 0.000785 accuracy: 0.975928 [50100/60000]\n","TEST: \n"," Accuracy: 98.4%, Avg loss: 0.044655 \n","\n","Epoch 5\n","----------------------------\n","loss: 0.001019 accuracy: 0.970000 [  100/60000]\n","loss: 0.000720 accuracy: 0.979010 [10100/60000]\n","loss: 0.000698 accuracy: 0.979005 [20100/60000]\n","loss: 0.000676 accuracy: 0.979535 [30100/60000]\n","loss: 0.000667 accuracy: 0.979626 [40100/60000]\n","loss: 0.000672 accuracy: 0.979381 [50100/60000]\n","TEST: \n"," Accuracy: 98.6%, Avg loss: 0.043931 \n","\n","Epoch 6\n","----------------------------\n","loss: 0.000638 accuracy: 0.980000 [  100/60000]\n","loss: 0.000679 accuracy: 0.977921 [10100/60000]\n","loss: 0.000624 accuracy: 0.980000 [20100/60000]\n","loss: 0.000611 accuracy: 0.980631 [30100/60000]\n","loss: 0.000611 accuracy: 0.980948 [40100/60000]\n","loss: 0.000605 accuracy: 0.980719 [50100/60000]\n","TEST: \n"," Accuracy: 98.6%, Avg loss: 0.041029 \n","\n","Epoch 7\n","----------------------------\n","loss: 0.000450 accuracy: 0.980000 [  100/60000]\n","loss: 0.000573 accuracy: 0.982376 [10100/60000]\n","loss: 0.000557 accuracy: 0.982836 [20100/60000]\n","loss: 0.000543 accuracy: 0.983455 [30100/60000]\n","loss: 0.000544 accuracy: 0.983466 [40100/60000]\n","loss: 0.000544 accuracy: 0.983513 [50100/60000]\n","TEST: \n"," Accuracy: 98.6%, Avg loss: 0.040153 \n","\n","Epoch 8\n","----------------------------\n","loss: 0.000353 accuracy: 0.990000 [  100/60000]\n","loss: 0.000549 accuracy: 0.983168 [10100/60000]\n","loss: 0.000533 accuracy: 0.983731 [20100/60000]\n","loss: 0.000526 accuracy: 0.983787 [30100/60000]\n","loss: 0.000511 accuracy: 0.984090 [40100/60000]\n","loss: 0.000517 accuracy: 0.983713 [50100/60000]\n","TEST: \n"," Accuracy: 98.9%, Avg loss: 0.035121 \n","\n","Epoch 9\n","----------------------------\n","loss: 0.000490 accuracy: 0.980000 [  100/60000]\n","loss: 0.000542 accuracy: 0.983861 [10100/60000]\n","loss: 0.000497 accuracy: 0.985274 [20100/60000]\n","loss: 0.000483 accuracy: 0.985648 [30100/60000]\n","loss: 0.000484 accuracy: 0.985561 [40100/60000]\n","loss: 0.000486 accuracy: 0.985150 [50100/60000]\n","TEST: \n"," Accuracy: 98.9%, Avg loss: 0.038495 \n","\n","Epoch 10\n","----------------------------\n","loss: 0.000241 accuracy: 0.990000 [  100/60000]\n","loss: 0.000475 accuracy: 0.986535 [10100/60000]\n","loss: 0.000448 accuracy: 0.986617 [20100/60000]\n","loss: 0.000447 accuracy: 0.986346 [30100/60000]\n","loss: 0.000451 accuracy: 0.985960 [40100/60000]\n","loss: 0.000458 accuracy: 0.985828 [50100/60000]\n","TEST: \n"," Accuracy: 98.9%, Avg loss: 0.035093 \n","\n","DONE!!\n"]}]},{"cell_type":"code","source":["!pip install torchsummary"],"metadata":{"id":"SAJhcxg0YhNZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1679641628979,"user_tz":-540,"elapsed":4441,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"349f6d0f-7c62-439b-da0f-7179c5197694"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: torchsummary in /usr/local/lib/python3.9/dist-packages (1.5.1)\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","def Plotting(history):\n","    loss = history[0]\n","    acc = history[1]\n","    val_loss = history[2]\n","    val_acc = history[3]\n","    epochs = range(1, len(acc) + 1)\n","\n","    plt.plot(epochs, acc, 'b', label='Training Accuracy')\n","    plt.plot(epochs, val_acc, 'bo', label='Validation Accuracy')\n","    plt.title('Training and Validation Accuracy')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Accuracy')\n","    plt.legend(loc='lower right')\n","    plt.figure()\n","\n","    plt.plot(epochs, loss, 'b', label='Training Loss')\n","    plt.plot(epochs, val_loss, 'bo', label='Validation Loss')\n","    plt.title('Trianing and Validation Loss')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Loss')\n","    plt.legend(loc='upper left')\n","    plt.show()\n","Plotting(history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"Mv9CyJgh2-pg","executionInfo":{"status":"ok","timestamp":1679668339436,"user_tz":-540,"elapsed":1548,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"17432dd6-b3ce-4901-b4c4-bdc0ff7ddad5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["img_path_list = []\n","for i in range(1,10):\n","  root_dir = '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/'\n","  root_dir += str(i)\n","  root_dir += '.png'\n","  img_path_list.append(root_dir)\n","\n","for i in range(20,41):\n","  root_dir = '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/'\n","  root_dir += str(i)\n","  root_dir += '.PNG'\n","  img_path_list.append(root_dir)\n","\n","print(img_path_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zrrLsb-_8lG0","executionInfo":{"status":"ok","timestamp":1679665076478,"user_tz":-540,"elapsed":3,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"1992ab5e-4bf1-4b55-e09b-d309755d129d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/1.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/2.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/3.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/4.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/5.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/6.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/7.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/8.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/9.png', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/20.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/21.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/22.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/23.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/24.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/25.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/26.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/27.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/28.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/29.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/30.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/31.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/32.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/33.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/34.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/35.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/36.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/37.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/38.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/39.PNG', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/mnist/40.PNG']\n"]}]},{"cell_type":"code","source":["a = [1,9,8,7,6,5,4,2,3,9,7,3,2,3,1,2,6,8,5,5,2,4,7,1,2,3,0,6,5,3]"],"metadata":{"id":"_xnNzhNYALv5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = ConvNet()\n","model.load_state_dict(torch.load(PATH_TO_TRAINED_MODEL))\n","model.eval()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VqzJXWOD1z65","executionInfo":{"status":"ok","timestamp":1679668346835,"user_tz":-540,"elapsed":11,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"951e57bb-df6c-4d7a-abbf-5af2fb64850d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ConvNet(\n","  (conv1): Conv2d(1, 10, kernel_size=(5, 5), stride=(1, 1))\n","  (conv2): Conv2d(10, 20, kernel_size=(5, 5), stride=(1, 1))\n","  (drop2D): Dropout2d(p=0.25, inplace=False)\n","  (mp): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  (fc1): Linear(in_features=320, out_features=100, bias=True)\n","  (fc2): Linear(in_features=100, out_features=10, bias=True)\n",")"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["import cv2\n","import numpy as np"],"metadata":{"id":"YcB1MihG114Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Display the input image\n","image = cv2.imread(img_path_list[0], cv2.IMREAD_GRAYSCALE)\n","image = cv2.resize(255-image, (28, 28))\n","image = image.astype(np.float32) / 255.0\n","image = np.expand_dims(image, axis=0)\n","image = np.expand_dims(image, axis=0)\n","image = torch.from_numpy(image)\n","plt.imshow(image.squeeze(), cmap='gray')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"JbHUr3v53vRT","executionInfo":{"status":"ok","timestamp":1679666272406,"user_tz":-540,"elapsed":4,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"12d54373-97a9-4cd9-d862-8e319f9a634a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["a = [1,9,8,7,6,5,4,2,3,9,7,3,2,3,1,2,6,8,5,5,2,4,7,1,2,3,0,6,5,3]"],"metadata":{"id":"dR5dzEopu1Hw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(len(img_path_list)):\n","  image = cv2.imread(img_path_list[i], cv2.IMREAD_GRAYSCALE)\n","  image = cv2.resize(image-255, (28, 28))\n","  image = image.astype(np.float32) / 255.0\n","  image = np.expand_dims(image, axis=0)\n","  image = np.expand_dims(image, axis=0)\n","  image = torch.from_numpy(image)\n","  with torch.no_grad():\n","      output = model(image)\n","      _, predicted = torch.max(output.data, 1)\n","      probabilities = torch.nn.functional.softmax(output, dim=1)\n","  print(output)\n","  print(\"Predicted digit:\", predicted.item(), a[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jzjujTpK2IT-","executionInfo":{"status":"ok","timestamp":1679668366501,"user_tz":-540,"elapsed":739,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"dab3d455-bffd-4251-9c88-54d58222eefa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-56-5edf47940209>:71: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.\n","  return F.log_softmax(x) # fully-connected layer에 넣고 logsoftmax 적용\n"]},{"output_type":"stream","name":"stdout","text":["tensor([[-1.4127, -1.7086, -2.2755, -4.9856, -1.5126, -2.7285, -3.1431, -2.5143,\n","         -3.2164, -4.1358]])\n","Predicted digit: 0 1\n","tensor([[-2.7123, -3.2459, -1.8650, -2.8675, -2.0846, -2.3062, -3.8415, -5.5763,\n","         -0.9672, -2.9269]])\n","Predicted digit: 8 9\n","tensor([[-1.8562, -1.2314, -3.0692, -2.4108, -2.6850, -1.9846, -2.8481, -4.3756,\n","         -2.4539, -2.9283]])\n","Predicted digit: 1 8\n","tensor([[-1.7371, -0.9663, -2.4575, -4.6954, -2.5428, -4.1263, -4.3651, -2.2692,\n","         -2.2500, -3.4300]])\n","Predicted digit: 1 7\n","tensor([[-0.8487, -2.6166, -3.2122, -2.5802, -6.2559, -1.5834, -3.0077, -4.8356,\n","         -2.3094, -3.9595]])\n","Predicted digit: 0 6\n","tensor([[-3.0854, -4.3833, -2.7417, -3.9440, -3.1666, -1.7871, -5.3319, -6.1228,\n","         -0.5154, -3.1221]])\n","Predicted digit: 8 5\n","tensor([[-2.3030, -1.5660, -4.1671, -2.6359, -2.4319, -1.4598, -4.9994, -4.1497,\n","         -1.6797, -2.5914]])\n","Predicted digit: 5 4\n","tensor([[-3.4395, -1.2832, -1.5573, -5.6361, -1.0520, -5.4171, -4.8658, -3.0621,\n","         -3.1365, -3.6928]])\n","Predicted digit: 4 2\n","tensor([[-3.0583, -3.0173, -4.6325, -2.0262, -2.5479, -1.5815, -3.9902, -5.9657,\n","         -1.0592, -2.1998]])\n","Predicted digit: 8 3\n","tensor([[ -9.3325, -13.1103,  -8.4604,  -3.6501,  -7.6348,  -5.0341, -15.0427,\n","         -11.8437,  -5.6163,  -0.0376]])\n","Predicted digit: 9 9\n","tensor([[-6.5567, -0.9713, -2.4478, -9.2836, -2.5326, -9.3092, -8.5849, -0.7917,\n","         -8.1552, -8.0859]])\n","Predicted digit: 7 7\n","tensor([[-2.9431, -7.0885, -2.0951, -4.3329, -7.0606, -1.7366, -4.6686, -7.3680,\n","         -0.4800, -5.4038]])\n","Predicted digit: 8 3\n","tensor([[ -5.7389,  -3.3996,  -0.0388, -16.8729,  -8.3556, -19.7689, -13.7476,\n","          -6.7010, -13.1973, -11.6428]])\n","Predicted digit: 2 2\n","tensor([[-0.2149, -6.8804, -2.0977, -3.0119, -9.4594, -5.6922, -5.7380, -8.6024,\n","         -4.5103, -5.9644]])\n","Predicted digit: 0 3\n","tensor([[ -2.7619,  -3.4575,  -4.4756, -12.4593,  -0.5620,  -5.6650,  -6.6000,\n","          -1.1464,  -8.8559,  -6.8002]])\n","Predicted digit: 4 1\n","tensor([[ -5.0421,  -3.1915,  -0.0504, -15.4465,  -7.9516, -16.4238, -13.0572,\n","          -6.7146, -11.3340, -10.9453]])\n","Predicted digit: 2 2\n","tensor([[ -2.5041,  -9.8651,  -0.2004,  -2.5493, -15.5995,  -5.3577,  -5.8849,\n","          -7.2249,  -4.3145,  -9.8681]])\n","Predicted digit: 2 6\n","tensor([[ -0.4826,  -8.0630,  -1.0286,  -5.6232, -10.6307,  -6.4511,  -4.9369,\n","         -10.2901,  -4.4139,  -7.6483]])\n","Predicted digit: 0 8\n","tensor([[ -4.0323, -15.6515,  -4.1391,  -3.9672, -16.5324,  -0.4348,  -1.4216,\n","         -14.8593,  -2.8368,  -9.9328]])\n","Predicted digit: 5 5\n","tensor([[-1.2058, -6.3818, -3.2370, -3.8009, -8.5647, -0.8978, -3.6461, -4.2948,\n","         -1.6803, -5.6462]])\n","Predicted digit: 5 5\n","tensor([[-6.2662e+00, -5.1536e+00, -1.0909e-02, -7.1052e+00, -9.0370e+00,\n","         -1.3261e+01, -9.8842e+00, -6.5171e+00, -7.4666e+00, -8.9524e+00]])\n","Predicted digit: 2 2\n","tensor([[-3.0349, -0.5526, -2.2391, -2.7192, -2.4531, -3.2310, -8.0265, -3.3305,\n","         -4.5786, -3.4389]])\n","Predicted digit: 1 4\n","tensor([[-4.0012, -1.1091, -2.6879, -2.2304, -2.7023, -3.3617, -5.2384, -1.3819,\n","         -2.2299, -4.5413]])\n","Predicted digit: 1 7\n","tensor([[-3.0205, -0.5365, -2.9166, -6.2434, -2.9559, -2.2583, -3.6729, -3.0871,\n","         -2.5638, -5.1606]])\n","Predicted digit: 1 1\n","tensor([[ -6.2257,  -1.5242,  -0.7283,  -3.6219,  -4.6582, -10.1524,  -9.7233,\n","          -1.5527,  -3.0261,  -6.9145]])\n","Predicted digit: 2 2\n","tensor([[-15.0285, -10.1623,  -9.5860,  -0.0418,  -4.4248,  -5.6013, -15.5721,\n","          -8.5579,  -3.7828,  -6.1122]])\n","Predicted digit: 3 3\n","tensor([[-3.4246, -1.1787, -2.4761, -2.7421, -4.3867, -1.2253, -2.9182, -2.4738,\n","         -3.1373, -3.7536]])\n","Predicted digit: 1 0\n","tensor([[-5.0415, -4.0793, -3.1563, -1.1535, -5.3444, -1.0191, -3.7662, -4.0617,\n","         -1.5985, -4.5824]])\n","Predicted digit: 5 6\n","tensor([[-2.5552, -2.0747, -1.8699, -1.3625, -6.0676, -1.7133, -2.8490, -3.0493,\n","         -2.7000, -3.4585]])\n","Predicted digit: 3 5\n","tensor([[-4.8901, -1.6567, -1.6221, -1.2184, -4.4516, -1.8153, -6.1287, -2.7550,\n","         -3.0170, -3.9452]])\n","Predicted digit: 3 3\n"]}]}]}