{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oEO_deMPEJM3","executionInfo":{"status":"ok","timestamp":1679675733633,"user_tz":-540,"elapsed":21890,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"ca0bdb49-7403-46b6-c2a4-cc7ac500ccd6"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["cd /content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lmAgQpv_ELeo","executionInfo":{"status":"ok","timestamp":1679675738944,"user_tz":-540,"elapsed":2062,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"535c65c5-7e28-4a2c-fd06-19f897493b32"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN\n"]}]},{"cell_type":"code","source":["!git config --global user.email '7373wj@naver.com'\n","!git config --global user.name 'woonjun'"],"metadata":{"id":"H_Y6cIOFEMUJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":83,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6266,"status":"ok","timestamp":1679677817296,"user":{"displayName":"최원준","userId":"01892957415387911878"},"user_tz":-540},"id":"GfuI_xmvs--m","outputId":"8f040fb9-09d7-4ec6-e720-350f8b451e85"},"outputs":[{"output_type":"stream","name":"stdout","text":["cpu is available\n","Files already downloaded and verified\n","Files already downloaded and verified\n"]}],"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","\n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","torch.manual_seed(777)\n","if device == 'cuda':\n","    torch.cuda.manual_seed_all(777)\n","print(device + \" is available\")\n","\n","# CIFAR-100 데이터셋 불러오기\n","learning_rate = 0.001\n","training_epochs = 20\n","batch_size = 128\n","\n","# data load\n","cifar_train = torchvision.datasets.CIFAR100(root='./',\n","                                            train=True,\n","                                            transform=transforms.ToTensor(),\n","                                            download=True)\n","cifar_test = torchvision.datasets.CIFAR100(root='./',\n","                                           train=False,\n","                                           transform=transforms.ToTensor(),\n","                                           download=True)\n","# Load CIFAR-100 dataset\n","train_dataloader = torch.utils.data.DataLoader(dataset=cifar_train,\n","                                               batch_size=batch_size,\n","                                               shuffle=True,\n","                                               drop_last=True)\n","test_dataloader = torch.utils.data.DataLoader(dataset=cifar_test,\n","                                              batch_size=batch_size,\n","                                              shuffle=True,\n","                                              drop_last=True)\n","\n","\n","# 신경망 정의하기\n","class Net(nn.Module):\n","  def __init__(self):\n","    super(Net, self).__init__()\n","    self.layer1 = torch.nn.Sequential(\n","        torch.nn.Conv2d(3, 32, (3,3), padding='same'),\n","        torch.nn.ReLU(),\n","        torch.nn.BatchNorm2d(32),\n","        torch.nn.MaxPool2d((2,2)),\n","        torch.nn.Dropout(0.5)\n","    )\n","    self.layer2 = torch.nn.Sequential(\n","        torch.nn.Conv2d(32, 64, (3,3), padding='same'),\n","        torch.nn.ReLU(),\n","        torch.nn.BatchNorm2d(64),\n","        torch.nn.MaxPool2d((2,2)),\n","        torch.nn.Dropout(0.5)\n","    )\n","    self.layer3 = torch.nn.Sequential(\n","        torch.nn.Conv2d(64, 128, (3,3), padding='same'),\n","        torch.nn.ReLU(),\n","        torch.nn.BatchNorm2d(128),\n","        torch.nn.MaxPool2d((2,2)),\n","        torch.nn.Dropout(0.5)\n","    )\n","    self.layer4 = torch.nn.Sequential(\n","        torch.nn.Flatten(),\n","        torch.nn.Linear(128*4*4, 512),\n","        torch.nn.Dropout(0.5)\n","    )\n","    self.layer5 = torch.nn.Sequential(\n","        torch.nn.Linear(512, 256),\n","        torch.nn.Dropout(0.5),\n","        torch.nn.Linear(256, 100)\n","    )\n","\n","  def forward(self, x):\n","    out = self.layer1(x)\n","    out = self.layer2(out)\n","    out = self.layer3(out)\n","    out = self.layer4(out)\n","    out = self.layer5(out)\n","    return out\n","\n","model = Net().to(device)\n","\n","# 손실 함수와 최적화 함수 정의하기\n","criterion = nn.CrossEntropyLoss().to(device)\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n"]},{"cell_type":"code","source":["def test(dataloader, model, criterion):\n","  size = len(dataloader.dataset)\n","  num_batches = len(dataloader)\n","  model.eval()\n","  test_loss, test_acc = 0, 0\n","  with torch.no_grad():\n","    for X, y in dataloader:\n","      X, y = X.to(device), y.to(device)\n","      pred = model(X)\n","      test_loss += criterion(pred, y).item()\n","      test_acc += (pred.argmax(1) == y).type(torch.float).sum().item()\n","\n","  test_loss /= num_batches\n","  test_acc /= size\n","\n","  print(f\"TEST: \\n Accuracy: {(100*test_acc):>.1f}%, Avg loss: {test_loss:>8f} \\n\")\n","\n","  return test_loss, test_acc"],"metadata":{"id":"8n8UXfwbECIC","executionInfo":{"status":"ok","timestamp":1679677821553,"user_tz":-540,"elapsed":353,"user":{"displayName":"최원준","userId":"01892957415387911878"}}},"execution_count":84,"outputs":[]},{"cell_type":"code","source":["def train(dataloader, model, criterion, optimizer):\n","  size = len(dataloader.dataset)\n","  train_accuracy, train_loss = 0,0\n","  model.train()\n","  for batch, (X, y) in enumerate(dataloader, 0):\n","\n","    X = X.to(device)\n","    y = y.to(device)\n","\n","    optimizer.zero_grad()\n","    pred = model(X)\n","    loss = criterion(pred, y)\n","    loss.backward()\n","    optimizer.step()\n","\n","    train_accuracy += (pred.argmax(1)==y).type(torch.float).sum().item()\n","    train_loss += loss.item()\n","\n","    if batch % 100 == 0:\n","      current = (batch+1) * len(X)\n","\n","      print(f'loss:{train_loss/current:>7f} accuracy: {train_accuracy/current:>7f} [{current:>5d}/{size:>5d}]')\n","\n","  return train_loss/len(dataloader), train_accuracy/size"],"metadata":{"id":"awTz5ZQ8FLOB","executionInfo":{"status":"ok","timestamp":1679677821989,"user_tz":-540,"elapsed":1,"user":{"displayName":"최원준","userId":"01892957415387911878"}}},"execution_count":85,"outputs":[]},{"cell_type":"code","source":["epochs = 10\n","\n","training_loss, training_accuracy = [], []\n","testing_loss, testing_accuracy = [], []\n","\n","for i in range(epochs):\n","  print(\"Epoch {}\\n----------------------\".format(i+1))\n","  train_loss, train_accuracy = train(train_dataloader, model, criterion, optimizer)\n","  test_loss, test_accuracy = test(test_dataloader, model, criterion)\n","\n","  training_loss.append(train_loss)\n","  training_accuracy.append(train_accuracy)\n","  testing_loss.append(test_loss)\n","  testing_accuracy.append(test_accuracy)\n","\n","print(\"DONE!!\")\n","\n","history = [training_loss,training_accuracy,testing_loss, testing_accuracy]\n","PATH_TO_TRAINED_MODEL = 'model.pth'\n","torch.save(model.state_dict(), PATH_TO_TRAINED_MODEL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pbaqOgDJFM70","executionInfo":{"status":"ok","timestamp":1679679501700,"user_tz":-540,"elapsed":1637629,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"7f6bdb61-dbf4-4e94-a725-e99374691571"},"execution_count":87,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1\n","----------------------\n","loss:0.037245 accuracy: 0.015625 [  128/50000]\n","loss:0.034359 accuracy: 0.068611 [12928/50000]\n","loss:0.032980 accuracy: 0.085782 [25728/50000]\n","loss:0.032067 accuracy: 0.095489 [38528/50000]\n","TEST: \n"," Accuracy: 18.6%, Avg loss: 3.417505 \n","\n","Epoch 2\n","----------------------\n","loss:0.027542 accuracy: 0.179688 [  128/50000]\n","loss:0.028373 accuracy: 0.149752 [12928/50000]\n","loss:0.028022 accuracy: 0.156172 [25728/50000]\n","loss:0.027683 accuracy: 0.164608 [38528/50000]\n","TEST: \n"," Accuracy: 20.9%, Avg loss: 3.296848 \n","\n","Epoch 3\n","----------------------\n","loss:0.026475 accuracy: 0.164062 [  128/50000]\n","loss:0.026147 accuracy: 0.189975 [12928/50000]\n","loss:0.026007 accuracy: 0.197917 [25728/50000]\n","loss:0.025836 accuracy: 0.203125 [38528/50000]\n","TEST: \n"," Accuracy: 22.5%, Avg loss: 3.182573 \n","\n","Epoch 4\n","----------------------\n","loss:0.023877 accuracy: 0.265625 [  128/50000]\n","loss:0.024813 accuracy: 0.220065 [12928/50000]\n","loss:0.024708 accuracy: 0.224852 [25728/50000]\n","loss:0.024642 accuracy: 0.226718 [38528/50000]\n","TEST: \n"," Accuracy: 28.0%, Avg loss: 2.875935 \n","\n","Epoch 5\n","----------------------\n","loss:0.023360 accuracy: 0.257812 [  128/50000]\n","loss:0.023755 accuracy: 0.248685 [12928/50000]\n","loss:0.023849 accuracy: 0.246346 [25728/50000]\n","loss:0.023811 accuracy: 0.247820 [38528/50000]\n","TEST: \n"," Accuracy: 30.3%, Avg loss: 2.767346 \n","\n","Epoch 6\n","----------------------\n","loss:0.023379 accuracy: 0.265625 [  128/50000]\n","loss:0.022815 accuracy: 0.274830 [12928/50000]\n","loss:0.023073 accuracy: 0.267724 [25728/50000]\n","loss:0.023097 accuracy: 0.266689 [38528/50000]\n","TEST: \n"," Accuracy: 31.9%, Avg loss: 2.743237 \n","\n","Epoch 7\n","----------------------\n","loss:0.022173 accuracy: 0.304688 [  128/50000]\n","loss:0.022730 accuracy: 0.275371 [12928/50000]\n","loss:0.022670 accuracy: 0.274876 [25728/50000]\n","loss:0.022647 accuracy: 0.277954 [38528/50000]\n","TEST: \n"," Accuracy: 29.1%, Avg loss: 2.895089 \n","\n","Epoch 8\n","----------------------\n","loss:0.023368 accuracy: 0.218750 [  128/50000]\n","loss:0.022052 accuracy: 0.290223 [12928/50000]\n","loss:0.022105 accuracy: 0.287702 [25728/50000]\n","loss:0.022102 accuracy: 0.289218 [38528/50000]\n","TEST: \n"," Accuracy: 28.8%, Avg loss: 2.852167 \n","\n","Epoch 9\n","----------------------\n","loss:0.021712 accuracy: 0.281250 [  128/50000]\n","loss:0.021682 accuracy: 0.298035 [12928/50000]\n","loss:0.021737 accuracy: 0.297613 [25728/50000]\n","loss:0.021741 accuracy: 0.298588 [38528/50000]\n","TEST: \n"," Accuracy: 37.2%, Avg loss: 2.432543 \n","\n","Epoch 10\n","----------------------\n","loss:0.019443 accuracy: 0.375000 [  128/50000]\n","loss:0.021296 accuracy: 0.311572 [12928/50000]\n","loss:0.021346 accuracy: 0.308030 [25728/50000]\n","loss:0.021330 accuracy: 0.308970 [38528/50000]\n","TEST: \n"," Accuracy: 37.0%, Avg loss: 2.477928 \n","\n","DONE!!\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","def Plotting(history):\n","    loss = history[0]\n","    acc = history[1]\n","    val_loss = history[2]\n","    val_acc = history[3]\n","    epochs = range(1, len(acc) + 1)\n","\n","    plt.plot(epochs, acc, 'b', label='Training Accuracy')\n","    plt.plot(epochs, val_acc, 'bo', label='Validation Accuracy')\n","    plt.title('Training and Validation Accuracy')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Accuracy')\n","    plt.legend(loc='lower right')\n","    plt.figure()\n","\n","    plt.plot(epochs, loss, 'b', label='Training Loss')\n","    plt.plot(epochs, val_loss, 'bo', label='Validation Loss')\n","    plt.title('Trianing and Validation Loss')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Loss')\n","    plt.legend(loc='upper left')\n","    plt.show()\n","Plotting(history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"HpMRHD3cFVzK","executionInfo":{"status":"ok","timestamp":1679679509286,"user_tz":-540,"elapsed":1621,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"5341d3d4-f8c7-4b7c-a3cd-d3499d91b775"},"execution_count":88,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["img_path_list = []\n","for i in range(1,41):\n","  root_dir = '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/'\n","  root_dir += str(i)\n","  root_dir += '.jpg'\n","  img_path_list.append(root_dir)\n","\n","\n","print(img_path_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N77BBieUeIA4","executionInfo":{"status":"ok","timestamp":1679679519058,"user_tz":-540,"elapsed":637,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"db97d705-840c-4577-d676-dd9d185268e5"},"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["['/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/1.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/2.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/3.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/4.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/5.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/6.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/7.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/8.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/9.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/10.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/11.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/12.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/13.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/14.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/15.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/16.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/17.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/18.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/19.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/20.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/21.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/22.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/23.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/24.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/25.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/26.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/27.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/28.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/29.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/30.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/31.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/32.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/33.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/34.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/35.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/36.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/37.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/38.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/39.jpg', '/content/drive/MyDrive/Colab Notebooks/GITHUB/colab_ML/ML_CNN/dataset/cifar100/40.jpg']\n"]}]},{"cell_type":"code","source":["a=['apples','apples','telephone','telephone','subway','subway','tea','tea','elephant','elephant','sunflower','sunflower','house','house','sea','sea','cycle','cycle','flower','flower','tv','tv','sneak','sneak','mountain','mountain','people','people','skunk','skunk','butterfly','butterfly','chair','chair','hamster','hamster','tree','tree','oranges','oranges']"],"metadata":{"id":"pD6kF_BeeT7k","executionInfo":{"status":"ok","timestamp":1679679524517,"user_tz":-540,"elapsed":2,"user":{"displayName":"최원준","userId":"01892957415387911878"}}},"execution_count":90,"outputs":[]},{"cell_type":"code","source":["# Load the model from file\n","model = Net()\n","PATH_TO_TRAINED_MODEL = 'model.pth'\n","model.load_state_dict(torch.load(PATH_TO_TRAINED_MODEL, map_location=torch.device('cpu')))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6XE7lhc4fEcB","executionInfo":{"status":"ok","timestamp":1679679527591,"user_tz":-540,"elapsed":327,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"9e354e30-ca74-4813-f809-43768187a230"},"execution_count":91,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["a=['apples','apples','telephone','telephone','subway','subway','tea','tea','elephant','elephant','sunflower','sunflower','house','house','sea','sea','cycle','cycle','flower','flower','tv','tv','sneak','sneak','mountain','mountain','people','people','skunk','skunk','butterfly','butterfly','chair','chair','hamster','hamster','tree','tree','oranges','oranges']"],"metadata":{"id":"7Z28QM_JjWph","executionInfo":{"status":"ok","timestamp":1679679534155,"user_tz":-540,"elapsed":2,"user":{"displayName":"최원준","userId":"01892957415387911878"}}},"execution_count":92,"outputs":[]},{"cell_type":"code","source":["CIFAR100_CLASSES = sorted(['beaver', 'dolphin', 'otter', 'seal', 'whale',  # aquatic mammals\n","                           'aquarium' 'fish', 'flatfish', 'ray', 'shark', 'trout',  # fish\n","                           'orchids', 'poppies', 'roses', 'sunflowers', 'tulips', # flowers\n","                           'bottles', 'bowls', 'cans', 'cups', 'plates', # food containers\n","                           'apples', 'mushrooms', 'oranges', 'pears', 'sweet peppers', # fruit and vegetables\n","                           'clock', 'computer' 'keyboard', 'lamp', 'telephone', 'television', # household electrical devices\n","                           'bed', 'chair', 'couch', 'table', 'wardrobe', # household furniture\n","                           'bee', 'beetle', 'butterfly', 'caterpillar', 'cockroach', # insects\n","                           'bear', 'leopard', 'lion', 'tiger', 'wolf', # large carnivores\n","                           'bridge', 'castle', 'house', 'road', 'skyscraper', # large man-made outdoor things\n","                           'cloud', 'forest', 'mountain', 'plain', 'sea', # large natural outdoor scenes\n","                           'camel', 'cattle', 'chimpanzee', 'elephant', 'kangaroo', # large omnivores and herbivores\n","                           'fox', 'porcupine', 'possum', 'raccoon', 'skunk', # medium-sized mammals\n","                           'crab', 'lobster', 'snail', 'spider', 'worm', # non-insect invertebrates\n","                           'baby', 'boy', 'girl', 'man', 'woman', # people\n","                           'crocodile', 'dinosaur', 'lizard', 'snake', 'turtle', # reptiles\n","                           'hamster', 'mouse', 'rabbit', 'shrew', 'squirrel', # small mammals\n","                           'maple', 'oak', 'palm', 'pine', 'willow', # trees\n","                           'bicycle', 'bus', 'motorcycle', 'pickup truck', 'train', # vehicles 1\n","                           'lawn-mower', 'rocket', 'streetcar', 'tank', 'tractor' # vehicles 2\n","                          ])"],"metadata":{"id":"f9Utp4RPvOQp","executionInfo":{"status":"ok","timestamp":1679680142756,"user_tz":-540,"elapsed":2,"user":{"displayName":"최원준","userId":"01892957415387911878"}}},"execution_count":100,"outputs":[]},{"cell_type":"code","source":["import torch\n","from PIL import Image\n","from torchvision import transforms\n","\n","# Load the image\n","for i in range(len(img_path_list)):\n","  image_path = img_path_list[i]\n","  image = Image.open(image_path)\n","\n","  # Define the transformation to apply to the image\n","  transform = transforms.Compose([\n","      transforms.Resize((32, 32)), # Resize the image to fit the input shape of your model\n","      transforms.ToTensor(), # Convert the image to a PyTorch tensor\n","      transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5]) # Normalize the image\n","  ])\n","\n","  # Apply the transformation to the image\n","  image_tensor = transform(image)\n","\n","  # Reshape the tensor to add a batch dimension\n","  image_tensor = image_tensor.unsqueeze(0)\n","\n","  # Load your trained model\n","  model = Net().to(device)\n","  model.load_state_dict(torch.load(\"model.pth\"))\n","\n","  # Pass the image through the model to get the predicted class probabilities\n","  with torch.no_grad():\n","      model.eval()\n","      output = model(image_tensor.to(device))\n","      probabilities = torch.softmax(output, dim=1)\n","\n","  # Get the predicted class\n","  predicted_class = torch.argmax(probabilities, dim=1).item()\n","\n","  print(\"Predicted class:\", CIFAR100_CLASSES[predicted_class], a[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9I0LLvu2t5D2","executionInfo":{"status":"ok","timestamp":1679680181912,"user_tz":-540,"elapsed":24924,"user":{"displayName":"최원준","userId":"01892957415387911878"}},"outputId":"15367fcc-85cb-4437-f18a-76bfe49df332"},"execution_count":101,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted class: worm apples\n","Predicted class: worm apples\n","Predicted class: lamp telephone\n","Predicted class: worm telephone\n","Predicted class: telephone subway\n","Predicted class: worm subway\n","Predicted class: chair tea\n","Predicted class: worm tea\n","Predicted class: worm elephant\n","Predicted class: worm elephant\n","Predicted class: lamp sunflower\n","Predicted class: lamp sunflower\n","Predicted class: worm house\n","Predicted class: chair house\n","Predicted class: worm sea\n","Predicted class: worm sea\n","Predicted class: lamp cycle\n","Predicted class: worm cycle\n","Predicted class: worm flower\n","Predicted class: worm flower\n","Predicted class: lamp tv\n","Predicted class: worm tv\n","Predicted class: worm sneak\n","Predicted class: chair sneak\n","Predicted class: kangaroo mountain\n","Predicted class: worm mountain\n","Predicted class: worm people\n","Predicted class: chair people\n","Predicted class: worm skunk\n","Predicted class: worm skunk\n","Predicted class: worm butterfly\n","Predicted class: worm butterfly\n","Predicted class: lamp chair\n","Predicted class: oranges chair\n","Predicted class: worm hamster\n","Predicted class: chair hamster\n","Predicted class: worm tree\n","Predicted class: worm tree\n","Predicted class: oranges oranges\n","Predicted class: chair oranges\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[],"authorship_tag":"ABX9TyMETc5Fjw/WqJ0YmOS2ihgB"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}